#  1. Проанализировать скорость и сложность одного любого алгоритма,
#  разработанных в рамках домашнего задания первых трех уроков.
#  Примечание: попробуйте написать несколько реализаций алгоритма и сравнить их.
#  Результаты анализа сохранить в виде комментариев в файле с кодом.

#  по задаче из дз ко 2му уроку

#  2. Посчитать четные и нечетные цифры введенного натурального числа.
#  Например, если введено число 34560, то у него 3 четные цифры (4, 6 и 0) и 2 нечетные (3 и 5).

import sys
import cProfile
import timeit
from random import randint


NUMBER_LENGTH = 2000


# цикл while без использования массивов


def cycle(n):
    even = 0
    odd = 0

    while n != 0:
        if (n % 10) % 2 == 0:
            even += 1
        else:
            odd += 1
        n //= 10
    return even, odd


def main():
    num = sum(10 ** i * randint(0, 10) for i in range(NUMBER_LENGTH))
    print(f'num = {num}')

    ev, od = cycle(num)

    print(f'В числе {ev} четных и {od} нечетных цифр')


cProfile.run('main()')
# print(timeit.timeit("cycle(num)", setup="from __main__ import cycle, num"))

"""
Результат для цикла:
10-значное число:
num = 7202393900
В числе 5 четных и 5 нечетных цифр
время 3.7355864690000002

20-значное число:
num = 91101558151067150733
В числе 5 четных и 15 нечетных цифр
время 7.784412111

Результат для cProfile:
2000 значное число: 
num = 90701950543234362046786880629006061006196380956311442632210763237601905733497207119031830088642368917639304213902215003645451967850796506977105187093290251101862772505068321050240309678827097401400369656861634099017802386660410276033187010621297567411343215212230061103999045820765066909067086291062370387470876685066370590739808099578977891866032105937769744349041939849018004577166290619903087110206195839633200760848009342584038702805937683213014023716255119472056834045004066200800205706373192507093828876040921004882643413758476521914088435380640604172316029710373990287287080302186821189530583333933222960631345140110970554367245309087610207090101684069087120665860202294268317177945778108416621777233878000030072307537925974218572815222809451334096109445318787203203197068009105038457215724179239776704775190002237140432057604394886396681852605997059152057072198410560331273309308048016102063570017030010184521083892679769151053464925303590270508489675005042986149936036778631422554113744683170377324636259941269409002752195705441423382091033610648391115630191601860412379674560741661602639366647528170086832722699672909454222407721715724853566140778710901501027141077407076981562258396650908002553076951269810635805310431640515168548585048728003151016721216545977600981541548333155104105908056678508180608574091937907076540132011008313377479311160385583211297514148989061308350604952690230388638625706059381009510139211173851700053108610489706880020275473240046912429855116303584584616046114715709083130593510348088016909010483579269021044678713535763073811664847309335745080073028084533257267866265800259318117028607536091366645513030010336049957178170195998119238067084978184000623107948198537249644880710590209480239056590403326600195487176953292128203189762301981593832077128099075954404027737660001291044786960504324370116007442030548489941573757505672280014275219632436021040707107336497088458986922048001523031102281451203506244427209971075869532895440525191300414570147555403208035144
В числе 1047 четных и 953 нечетных цифр
         12972 function calls in 0.089 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.089    0.089 <string>:1(<module>)
        1    0.013    0.013    0.013    0.013 alg_hw4_1.py:23(cycle)
        1    0.000    0.000    0.089    0.089 alg_hw4_1.py:36(main)
     2001    0.062    0.000    0.070    0.000 alg_hw4_1.py:37(<genexpr>)
     2000    0.003    0.000    0.007    0.000 random.py:174(randrange)
     2000    0.001    0.000    0.008    0.000 random.py:218(randint)
     2000    0.003    0.000    0.004    0.000 random.py:224(_randbelow)
        1    0.000    0.000    0.089    0.089 {built-in method builtins.exec}
        2    0.000    0.000    0.000    0.000 {built-in method builtins.print}
        1    0.005    0.005    0.075    0.075 {built-in method builtins.sum}
     2000    0.000    0.000    0.000    0.000 {method 'bit_length' of 'int' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
     2963    0.001    0.000    0.001    0.000 {method 'getrandbits' of '_random.Random' objects}

"""

"""
#  рекурсия без использования массивов


def count_digit(number, ev, od):
    if number == 0:
        return ev, od
    else:
        return count_digit(number // 10, ev + abs((number % 10) % 2 - 1), od + (number % 10) % 2)


def main():

    sys.setrecursionlimit(10000)

    n = sum(10 ** i * randint(0, 10) for i in range(NUMBER_LENGTH))
    print(f'n = {n}')

    even, odd = count_digit(n, 0, 0)

    print(f'В числе {even} четных и {odd} нечетных цифр')


cProfile.run('main()')

#  print(timeit.timeit("count_digit(n, 0, 0)", setup="from __main__ import count_digit, n"))
"""

"""
результат для рекурсии:

10-значное число:
n = 8806750161
В числе 6 четных и 4 нечетных цифр
время 7.762702275

20-значное число:
n = 11811409402259891179
В числе 8 четных и 12 нечетных цифр
время 15.761630147

Результат cProfile:
2000-значное число:

n = 46405564493400706147842952378777098021285909763162420787518020013414074881734999410290695504464242918308582423202973726808224005706054078096214090580363489405650843737309399083449106221204997260705815000420009107766629755925020200512000028576046199414602500290280903909969213758579704302024878802908860054036210976087615284144910516353078981398013244407900697381515519559841981830711176024460900031088061414255210105624910005802066171005406987458452462858503123215886609321124407796386664192502731613373719910687056179680096246441669870502617786274830674807710076487078088804050080230465104955102067407102004604700495496825041899338158780912767004356842043314306471909096340606100797260096190910756972707983789010055745748617005006989391030817515364072485203345409576093367073204785007807330341991961320810341708968843645380912161578486690951007746082566261530460238896681092607042865882162097338071952022595359250141109800578557170403006104190499800906510084671068039804738030016096790101645195953020472490614644334622916967432210584099034405830799725120592243011090315053720079369539563354620428807067099710681919177014492295779430139162181085587547872305125806595052425490119791108333100170553288255302272069172476310014034205359228211802313704755105081724807039620026211782651181037507136495092085223743160155799036403992447003710334186873588553480625088984631125495551014634817295965112644503912501794162686078778020720955887496335066376057244547912366804429390468740410200503603785739236016474401779253656284814395061143786293045703801846025556026501024788271364906094659939015474795488523112442823904451013854341872005900760052377764447437007100540163031394009432450875530295965634495130108273627359100137912820023586302254879324811927872671898108505837940941021112402161500028171501048490326304265914026060520548834546223212109828731104315026447350256520489625079645212354061063026049801109513007616073809445213888928757023068471240901671870446738010732017229990619780724520044666702665208080
В числе 1097 четных и 903 нечетных цифр
         16912 function calls (14912 primitive calls) in 0.084 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.084    0.084 <string>:1(<module>)
   2001/1    0.024    0.000    0.025    0.025 alg_hw4_1.py:65(count_digit)
        1    0.000    0.000    0.084    0.084 alg_hw4_1.py:72(main)
     2001    0.048    0.000    0.054    0.000 alg_hw4_1.py:76(<genexpr>)
     2000    0.002    0.000    0.005    0.000 random.py:174(randrange)
     2000    0.001    0.000    0.006    0.000 random.py:218(randint)
     2000    0.002    0.000    0.003    0.000 random.py:224(_randbelow)
     2000    0.001    0.000    0.001    0.000 {built-in method builtins.abs}
        1    0.000    0.000    0.084    0.084 {built-in method builtins.exec}
        2    0.000    0.000    0.000    0.000 {built-in method builtins.print}
        1    0.004    0.004    0.059    0.059 {built-in method builtins.sum}
        1    0.000    0.000    0.000    0.000 {built-in method sys.setrecursionlimit}
     2000    0.000    0.000    0.000    0.000 {method 'bit_length' of 'int' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
     2902    0.001    0.000    0.001    0.000 {method 'getrandbits' of '_random.Random' objects}


"""

